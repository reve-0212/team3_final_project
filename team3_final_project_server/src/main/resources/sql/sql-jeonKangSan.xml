<?xml version="1.0" encoding="UTF-8"?>
<!--sql-jeonKangSan.xml-->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.team3_final_project_server.JunKangSan.JKSMapper">

    <select id="getAllRestaurants" resultType="com.example.team3_final_project_server.dto.RestaurantDTO">
        SELECT * FROM restaurant
    </select>


<!--    리뷰 -->
    <select id="getAllReviews" parameterType="int" resultType="com.example.team3_final_project_server.dto.ReviewDTO">
        SELECT
        r.review_idx,
        r.user_idx,
        r.res_idx,
        r.review_rating,
        r.review_content,
        r.review_write_date,
        r.review_image_1,
        r.review_image_2,
        r.review_image_3
        FROM
        review r
        JOIN
        restaurant res ON r.res_idx = res.res_idx
        WHERE
        r.res_idx = #{resIdx}
        ORDER BY
        r.review_write_date DESC;
    </select>

    <select id="getRestaurantsByResIdx" resultType="com.example.team3_final_project_server.dto.RestaurantDTO">
        SELECT *
        FROM restaurant
        WHERE res_idx = #{resIdx}
    </select>

    <select id="getAvgRatingByResIdx" resultType="Double">
        SELECT ROUND(AVG(review_rating), 1)
        FROM review
        WHERE res_idx = #{resIdx}
    </select>

    <select id="getAvgRatingByType" resultType="map">
        SELECT
        review_type,
        ROUND(AVG(review_rating), 1) AS avg_rating
        FROM review
        WHERE res_idx = #{resIdx}
        GROUP BY review_type
    </select>

    <select id="getCategoryByAddress"
            parameterType="string"
            resultType="com.example.team3_final_project_server.dto.CategoryDTO">
        SELECT
        category_idx,
        res_idx,
        category_addr,
        category_name,
        category_tag
        FROM category
        WHERE category_addr LIKE CONCAT('%', #{categoryAddr}, '%')
    </select>


<!--상세보기 -->

    <select id="getRstListByPath" parameterType="int">
        SELECT
        r.res_idx,
        r.res_name,
        r.res_call,
        r.res_address1,
        r.res_address2,
        r.res_introduce,
        r.res_reserve_time,
        r.res_lat,
        r.res_lng,
        r.res_price_range,
        r.reserve_or_waiting,
        r.res_option_1,
        c.category_tag,
        c.category_name
        FROM restaurant r
        LEFT JOIN category c ON r.res_idx = c.res_idx
        WHERE r.res_idx = #{resIdx}
    </select>





    <select id="getBestMenu" resultType="com.example.team3_final_project_server.dto.MenuDTO">
        select m.menu_name, m.menu_price, m.menu_explanation, m.menu_image
        from menu as m
        join restaurant as r
        on m.res_idx = r.res_idx
        where r.res_idx = #{resIdx}
        order by m.menu_sort desc;
    </select>

<!--    <select id="getRstListByCategory" parameterType="string"-->
<!--            resultType="com.example.team3_final_project_server.dto.RestaurantDTO">-->
<!--        SELECT *-->
<!--        FROM restaurant r-->
<!--        JOIN category c ON r.res_idx = c.res_idx-->
<!--        WHERE c.category_name LIKE CONCAT('%', #{category}, '%');-->
<!--    </select>-->

    <select id="getRstListByCategory" parameterType="string"
            resultType="com.example.team3_final_project_server.dto.RestaurantDTO">
        SELECT
        r.*,
        IFNULL(AVG(rv.review_rating), 0) AS avgRating
        FROM restaurant r
        JOIN category c ON r.res_idx = c.res_idx
        LEFT JOIN review rv ON r.res_idx = rv.res_idx
        WHERE c.category_name LIKE CONCAT('%', #{category}, '%')
        GROUP BY r.res_idx
    </select>

</mapper>
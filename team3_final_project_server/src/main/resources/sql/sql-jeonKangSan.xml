<?xml version="1.0" encoding="UTF-8"?>
<!--sql-jeonKangSan.xml-->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.team3_final_project_server.JunKangSan.JKSMapper">

    <select id="getAllRestaurants" resultType="com.example.team3_final_project_server.dto.RestaurantDTO">
        SELECT * FROM restaurant
    </select>


<!-- 리뷰 -->
    <select id="getAllReviews" parameterType="int" resultType="com.example.team3_final_project_server.dto.ReviewDTO">
        SELECT
        r.review_idx,
        r.user_idx,
        r.res_idx,
        r.review_rating,
        r.review_content,
        r.review_write_date,
        r.review_image_1,
        r.review_image_2,
        r.review_image_3
        FROM
        review r
        JOIN
        restaurant res ON r.res_idx = res.res_idx
        WHERE
        r.res_idx = #{resIdx}
        ORDER BY
        r.review_write_date DESC;
    </select>

    <select id="getRestaurantsByResIdx" resultType="com.example.team3_final_project_server.dto.RestaurantDTO">
        SELECT *
        FROM restaurant
        WHERE res_idx = #{resIdx}
    </select>

    <select id="getAvgRatingByResIdx" resultType="Double">
        SELECT ROUND(AVG(review_rating), 1)
        FROM review
        WHERE res_idx = #{resIdx}
    </select>

    <select id="getAvgRatingByType" resultType="map">
        SELECT
        review_type,
        ROUND(AVG(review_rating), 1) AS avg_rating
        FROM review
        WHERE res_idx = #{resIdx}
        GROUP BY review_type
    </select>

    <select id="getCategoryByAddress"
            parameterType="string"
            resultType="com.example.team3_final_project_server.dto.CategoryDTO">
        SELECT
        category_idx,
        res_idx,
        category_addr,
        category_name,
        category_tag
        FROM category
        WHERE category_addr LIKE CONCAT('%', #{categoryAddr}, '%')
    </select>

<!-- 가게 상세보기 -->
    <select id="getRstListByPath" parameterType="int">
      SELECT *
      FROM restaurant
      WHERE res_idx =#{pathIdx};
    </select>

    <select id="getBestMenu" resultType="com.example.team3_final_project_server.dto.MenuDTO">
        SELECT
        m.menu_idx,
        m.res_idx,
        m.menu_name,
        m.menu_price,
        m.menu_explanation,
        m.menu_image,
        m.menu_hidden,
        m.menu_sold_out,
        m.menu_sort
        FROM menu AS m
        WHERE m.res_idx = #{resIdx}
        ORDER BY m.menu_sort DESC
    </select>

<!--    <select id="getBestMenu" resultType="com.example.team3_final_project_server.dto.MenuDTO">-->
<!--        select m.menu_name, m.menu_price, m.menu_explanation, m.menu_image-->
<!--        from menu as m-->
<!--        join restaurant as r-->
<!--        on m.res_idx = r.res_idx-->
<!--        where r.res_idx = #{resIdx}-->
<!--        order by m.menu_sort desc;-->
<!--    </select>-->

    <select id="getRstListByCategory" parameterType="string"
            resultType="com.example.team3_final_project_server.dto.RestaurantDTO">
        SELECT
        r.*,
        IFNULL(AVG(rv.review_rating), 0) AS avgRating
        FROM restaurant r
        JOIN category c ON r.res_idx = c.res_idx
        LEFT JOIN review rv ON r.res_idx = rv.res_idx
        WHERE c.category_name LIKE CONCAT('%', #{category}, '%')
        GROUP BY r.res_idx
    </select>

<!-- 가게 리스트 + 평점 -->
    <select id="getRstListByFilter" resultType="com.example.team3_final_project_server.dto.RestaurantListDTO">
        SELECT
        r.res_idx AS resIdx,
        r.user_idx AS userIdx,
        r.res_image1 AS resImage1,
        r.res_image2 AS resImage2,
        r.res_image3 AS resImage3,
        r.res_name AS resName,
        r.res_call AS resCall,
        r.res_address1 AS resAddress1,
        r.res_address2 AS resAddress2,
        r.res_introduce AS resIntroduce,
        r.res_reserve_time AS resReserveTime,
        r.res_lat AS resLat,
        r.res_lng AS resLng,
        r.res_price_range AS resPriceRange,
        r.reserve_or_waiting AS reserveOrWaiting,
        r.res_option_1 AS resOption1,
        c.category_name AS categoryName,
        IFNULL(AVG(rv.review_rating), 0) AS avgRating,
        COUNT(rv.review_idx) AS reviewCount
        FROM restaurant r
        JOIN category c ON r.res_idx = c.res_idx
        LEFT JOIN review rv ON r.res_idx = rv.res_idx
        WHERE c.category_name LIKE CONCAT('%', #{category}, '%')
        <if test="region != null and region != ''">
            AND r.res_address1 LIKE CONCAT('%', #{region}, '%')
        </if>
        GROUP BY r.res_idx
        <choose>
            <when test="sort == '별점 높은 순'">
                ORDER BY avgRating DESC
            </when>
            <when test="sort == '리뷰 많은 순'">
                ORDER BY reviewCount DESC
            </when>
            <otherwise>
                ORDER BY r.res_idx DESC
            </otherwise>
        </choose>
    </select>
    <insert id="insertBookmark">
        INSERT INTO bookmark (user_idx, res_idx)
        VALUES (#{userIdx}, #{resIdx})
    </insert>

    <delete id="deleteBookmark">
        DELETE FROM bookmark
        WHERE user_idx = #{userIdx} AND res_idx = #{resIdx}
    </delete>



    <!-- 북마크된 가게 리스트 조회 -->
    <select id="getBookmarkedRestaurants" parameterType="int" resultType="com.example.team3_final_project_server.dto.RestaurantListDTO">
        SELECT
        r.res_idx,
        r.res_name,
        r.res_image1,
        r.res_image2,
        r.res_image3,
        r.res_address1,
        r.reserve_or_waiting,
        r.res_option_1,
        c.category_name,
        ROUND(AVG(rv.review_rating), 1) AS avgRating,
        COUNT(rv.review_idx) AS reviewCount
        FROM
        bookmark b
        JOIN restaurant r ON b.res_idx = r.res_idx
        LEFT JOIN category c ON r.res_idx = c.res_idx
        LEFT JOIN review rv ON r.res_idx = rv.res_idx
        WHERE
        b.user_idx = #{userIdx}
        GROUP BY
        r.res_idx
    </select>

</mapper>
plugins {
  id 'java'
  id 'org.springframework.boot' version '3.4.4'
  id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.4'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  testImplementation 'org.springframework.security:spring-security-test'
  compileOnly 'org.projectlombok:lombok'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  runtimeOnly 'com.mysql:mysql-connector-j'
  annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
  annotationProcessor 'org.projectlombok:lombok'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.4'
  runtimeOnly 'com.h2database:h2'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

//    JWT 라이브러리
  implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
  runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'
  runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'

}

tasks.named('test') {
  useJUnitPlatform()
}

def frontendDir = "$projectDir/src/main/frontend"

sourceSets {
  main {
    resources {
      srcDirs = ["$projectDir/src/main/resources"]
    }
  }
}

processResources {
  dependsOn "copyReactBuildFiles"
}

task installReact(type: Exec){
  workingDir "$frontendDir"
  inputs.dir "$frontendDir"
  group = BasePlugin.BUILD_GROUP

  if (System.getProperty("os.name").toLowerCase(Locale.ROOT).contains("windows")){
    commandLine "npm.cmd", "audit", "fix"
    commandLine "npm.cmd", "install"
  }
  else {
    commandLine "npm", "audit", "fix"
    commandLine "npm", "install"
  }
}

task buildReact(type: Exec){
  dependsOn "installReact"
  workingDir "$frontendDir"
  inputs.dir "$frontendDir"
  group = BasePlugin.BUILD_GROUP

  if (System.getProperty("os.name").toLowerCase(Locale.ROOT).contains("windows")){
    commandLine "npm.cmd", "run-script", "build"
  }
  else {
    commandLine "npm", "run-script", "build"
  }
}

task copyReactBuildFiles(type: Copy){
  dependsOn "buildReact"
  from "$frontendDir/dist"
  into "$projectDir/src/main/resources/static"
}
tasks.bootJar{
  dependsOn "copyReactBuildFiles"
}